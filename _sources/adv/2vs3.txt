************************
Porównanie Pythona 2 i 3
************************

Funkcja ``print``
=================

Zastąpiono słowo kluczowe funkcją:

**Python 2**

.. code-block:: pycon

    >>> print 'Python', python_version()
    Python 2.7.6
    >>> print 'Hello, World!'
    Hello, World!
    >>> print('Hello, World!')
    Hello, World!
    >>> print "text", ; print 'print more text on the same line'
    text print more text on the same line

**Python 3**

.. code-block:: pycon

    >>> print('Python', python_version())
    Python 3.4.1
    >>> print('Hello, World!')
    Hello, World!
    >>> print("some text,", end="")
    some text, >>> print(' print more text on the same line')
    print more text on the same line
    >>> print 'Hello, World!'
    File "", line 1
        print 'Hello, World!'
                                ^
    SyntaxError: invalid syntax


Dzielenie
=========

**Python 2**

.. code-block:: pycon

    >>> print 'Python', python_version()
    Python 2.7.6
    >>> print '3 / 2 =', 3 / 2
    3 / 2 = 1
    >>> print '3 // 2 =', 3 // 2
    3 // 2 = 1
    >>> print '3 / 2.0 =', 3 / 2.0
    3 / 2.0 = 1.5
    >>> print '3 // 2.0 =', 3 // 2.0
    3 // 2.0 = 1.0

**Python 3**

.. code-block:: pycon

    >>> print('Python', python_version())
    Python 3.4.1
    >>> print('3 / 2 =', 3 / 2)
    3 / 2 = 1.5
    >>> print('3 // 2 =', 3 // 2)
    3 // 2 = 1
    >>> print('3 / 2.0 =', 3 / 2.0)
    3 / 2.0 = 1.5
    >>> print('3 // 2.0 =', 3 // 2.0)
    3 // 2.0 = 1.0

Wsparcie dla Unicode
====================

**Python 2**

.. code-block:: pycon

    >>> print 'Python', python_version()
    Python 2.7.6
    >>> print type(unicode('this is like a python3 str type'))
    <type 'unicode'>
    >>> print type(b'byte type does not exist')
    <type 'str'>
    >>> print 'they are really' + b' the same'
    they are really the same
    >>> print type(bytearray(b'bytearray oddly does exist though'))
    <type 'bytearray'>


**Python 3**

.. code-block:: pycon

    >>> print('Python', python_version())
    Python 3.4.1
    >>> print('strings are now utf-8 \u03BCnico\u0394é!')
    strings are now utf-8 μnicoΔé!
    >>> print('Python3 has', type(b' bytes for storing data'))
    Python 3 has <class 'bytes'>
    >>> print('Python3 also has', type(bytearray(b'bytearrays')))
    Python 3 also has <class 'bytearray'>
    >>> 'note that we cannot add a string' + b'bytes for data'
    Traceback (most recent call last):
    ...
    TypeError: Can't convert 'bytes' object to str implicitly


``xrange``
==========

.. code-block:: python

    import timeit

    n = 10000
    def test_range(n):
        for i in range(n):
            pass

    def test_xrange(n):
        for i in xrange(n):
            pass


**Python 2**

.. code-block:: pycon

    >>> %timeit test_range(n)
    1000 loops, best of 3: 433 µs per loop

    >>> %timeit test_xrange(n)
    1000 loops, best of 3: 350 µs per loop

**Python 3**

.. code-block:: pycon

    >>> %timeit test_range(n)
    1000 loops, best of 3: 520 µs per loop
    >>> xrange(10)
    >>> xrange(10)
    Traceback (most recent call last):
    ...
    NameError: name 'xrange' is not defined


Za to ``range`` w Pythonie 3 ma nową metodę ``__contains__``.


Rozpakowywanie
==============

**Python 2**

.. code-block:: pycon

    >>> a, b = range(2)
    >>> a
    0
    >>> b
    1

**Python 3**

.. code-block:: pycon

    >>> a, b, *rest = range(10)
    >>> a
    0
    >>> b
    1
    >>> rest
    [2, 3, 4, 5, 6, 7, 8, 9]


Wyjątki
=======

**Python 2**

.. code-block:: pycon

    >>> raise IOError, "file error"
    Traceback (most recent call last):
    ...
    IOError: file error

**Python 3**

.. code-block:: pycon

    >>> raise IOError, "file error"
      File "<stdin>", line 1
        raise IOError, "file error"
                     ^
    SyntaxError: invalid syntax
    >>> raise IOError("file error")
    Traceback (most recent call last):
    ...
    OSError: file error
    >>>


W Pythonie 3 musimy używać as w sekcji except:

**Python 2**

.. code-block:: python

    print 'Python', python_version()
    try:
        let_us_cause_a_NameError
    except NameError, err:
        print err, '--> our error message'

**Python 3**

.. code-block:: python

    print('Python', python_version())
    try:
        let_us_cause_a_NameError
    except NameError as err:
        print(err, '--> our error message')

Funkcja i metdoda ``next``
==========================

**Python 2**

.. code-block:: pycon

    >>> my_generator = (letter for letter in 'abcdefg')
    >>> next(my_generator)
    'a'
    >>> my_generator.next()
    'b'

**Python 3**

.. code-block:: pycon

    >>> my_generator = (letter for letter in 'abcdefg')
    >>> next(my_generator)
    'a'
    >>> my_generator.__next__()
    'b'


Wyciekanie zmiennych z pętli ``for``
====================================

**Python 2**

.. code-block:: pycon

    >>> i = 1
    >>> [i for i in range(5)]
    [0, 1, 2, 3, 4]
    >>> i
    4


**Python 3**

.. code-block:: pycon

    >>> i = 1
    >>> [i for i in range(5)]
    [0, 1, 2, 3, 4]
    >>> i
    1

Porównywanie typów
==================

**Python 2**

.. code-block:: pycon

    >>> [1, 2] > 'foo'
    False

**Python 3**

.. code-block:: pycon

    >>> [1, 2] > 'foo'
    Traceback (most recent call last):
    ...
    TypeError: unorderable types: list() > str()

Zwracanie obiektów iterowalnych zamiast list
============================================

**Python 2**

.. code-block:: pycon

    >>> range(3)
    [0, 1, 2]
    >>> type(range(3))
    <type 'list'>

**Python 3**

    >>> range(3)
    range(0, 3)
    >>> type(range(3))
    <class 'range'>
    >>> list(range(3))
    [0, 1, 2]

Pozostałe funkcje które nie zwracają więcej list:

.. code-block:: python

    zip()
    map()
    filter()
    dict.keys()
    dict.values()
    dict.items()

``yield from``
==============

**Python 2**

.. code-block:: python

    for i in gen():
        yield i


**Python 3**

.. code-block:: python

    yield from gen()

Generatory mogą zwracać wartość!

.. code-block:: python

    def a():
        yield 1
        yield 2
        yield 3
        return 7

    def b():
        next = yield from a()
        yield next
        yield next + 1

    >>> print(list(b()))
    [1, 2, 3, 7, 8]